From 3b1c0b09c99bfd30355a6ba87a15e9d408a51109 Mon Sep 17 00:00:00 2001
From: Simon Glass <sjg@chromium.org>
Date: Sat, 24 Aug 2019 07:22:41 -0600
Subject: [PATCH] patman: Drop binary parameter

Since cros_subprocess use bytestrings now, this feature not needed. Drop
it.

Upstream-Status: Backport

Signed-off-by: Simon Glass <sjg@chromium.org>
---
 tools/patman/cros_subprocess.py |  3 +--
 tools/patman/tools.py           | 15 +++++++--------
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/tools/patman/cros_subprocess.py b/tools/patman/cros_subprocess.py
index 06be64cc2c..0f0d60dfb7 100644
--- a/tools/patman/cros_subprocess.py
+++ b/tools/patman/cros_subprocess.py
@@ -54,7 +54,7 @@ class Popen(subprocess.Popen):
     """
 
     def __init__(self, args, stdin=None, stdout=PIPE_PTY, stderr=PIPE_PTY,
-                 shell=False, cwd=None, env=None, binary=False, **kwargs):
+                 shell=False, cwd=None, env=None, **kwargs):
         """Cut-down constructor
 
         Args:
@@ -72,7 +72,6 @@ class Popen(subprocess.Popen):
         """
         stdout_pty = None
         stderr_pty = None
-        self.binary = binary
 
         if stdout == PIPE_PTY:
             stdout_pty = pty.openpty()
diff --git a/tools/patman/tools.py b/tools/patman/tools.py
index 0d4705db76..97441ca796 100644
--- a/tools/patman/tools.py
+++ b/tools/patman/tools.py
@@ -186,7 +186,7 @@ def PathHasFile(path_spec, fname):
             return True
     return False
 
-def Run(name, *args, **kwargs):
+def Run(name, *args):
     """Run a tool with some arguments
 
     This runs a 'tool', which is a program used by binman to process files and
@@ -196,7 +196,6 @@ def Run(name, *args, **kwargs):
     Args:
         name: Command name to run
         args: Arguments to the tool
-        kwargs: Options to pass to command.run()
 
     Returns:
         CommandResult object
@@ -206,8 +205,8 @@ def Run(name, *args, **kwargs):
         if tool_search_paths:
             env = dict(os.environ)
             env['PATH'] = ':'.join(tool_search_paths) + ':' + env['PATH']
-        return command.Run(name, *args, capture=True,
-                           capture_stderr=True, env=env, **kwargs)
+        return command.Run(name, *args, capture=True, capture_stderr=True,
+                           env=env)
     except:
         if env and not PathHasFile(env['PATH'], name):
             msg = "Please install tool '%s'" % name
@@ -401,14 +400,14 @@ def Compress(indata, algo, with_header=True):
     fname = GetOutputFilename('%s.comp.tmp' % algo)
     WriteFile(fname, indata)
     if algo == 'lz4':
-        data = Run('lz4', '--no-frame-crc', '-c', fname, binary=True)
+        data = Run('lz4', '--no-frame-crc', '-c', fname)
     # cbfstool uses a very old version of lzma
     elif algo == 'lzma':
         outfname = GetOutputFilename('%s.comp.otmp' % algo)
         Run('lzma_alone', 'e', fname, outfname, '-lc1', '-lp0', '-pb0', '-d8')
         data = ReadFile(outfname)
     elif algo == 'gzip':
-        data = Run('gzip', '-c', fname, binary=True)
+        data = Run('gzip', '-c', fname)
     else:
         raise ValueError("Unknown algorithm '%s'" % algo)
     if with_header:
@@ -441,13 +440,13 @@ def Decompress(indata, algo, with_header=True):
     with open(fname, 'wb') as fd:
         fd.write(indata)
     if algo == 'lz4':
-        data = Run('lz4', '-dc', fname, binary=True)
+        data = Run('lz4', '-dc', fname)
     elif algo == 'lzma':
         outfname = GetOutputFilename('%s.decomp.otmp' % algo)
         Run('lzma_alone', 'd', fname, outfname)
         data = ReadFile(outfname)
     elif algo == 'gzip':
-        data = Run('gzip', '-cd', fname, binary=True)
+        data = Run('gzip', '-cd', fname)
     else:
         raise ValueError("Unknown algorithm '%s'" % algo)
     return data
-- 
2.24.0

