From 7cee7cf8ec4f481853aaf2857e5b6507d630c6a4 Mon Sep 17 00:00:00 2001
From: Qi Hou <nxf47649@lsv11151.swis.cn-sha01.nxp.com>
Date: Mon, 29 Nov 2021 14:51:13 +0800
Subject: [PATCH 3/4] FFmpeg: add flush operation and correct timestamp

Upstream-Status: Inappropriate [NXP specific]
---
 libavcodec/v4l2_context.c |  8 ++++++
 libavcodec/v4l2_m2m.c     |  1 +
 libavcodec/v4l2_m2m_dec.c | 53 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 62 insertions(+)

diff --git a/third_party/ffmpeg/libavcodec/v4l2_context.c b/third_party/ffmpeg/libavcodec/v4l2_context.c
index b08f0015c2..36d1bd80f4 100644
--- a/third_party/ffmpeg/libavcodec/v4l2_context.c
+++ b/third_party/ffmpeg/libavcodec/v4l2_context.c
@@ -178,6 +178,7 @@ static int v4l2_handle_event(V4L2Context *ctx)
     V4L2m2mContext *s = ctx_to_m2mctx(ctx);
     struct v4l2_format cap_fmt = s->capture.format;
     struct v4l2_event evt = { 0 };
+    struct v4l2_selection selection = { 0 };
     int ret;
 
     ret = ioctl(s->fd, VIDIOC_DQEVENT, &evt);
@@ -203,6 +204,13 @@ static int v4l2_handle_event(V4L2Context *ctx)
     if (v4l2_resolution_changed(&s->capture, &cap_fmt)) {
         s->capture.height = v4l2_get_height(&cap_fmt);
         s->capture.width = v4l2_get_width(&cap_fmt);
+        selection.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        ret = ioctl(s->fd, VIDIOC_G_SELECTION, &selection);
+        if (!ret) {
+            /* update the size of the resulting frame */
+            s->capture.height = selection.r.height;
+            s->capture.width  = selection.r.width;
+        }
         s->capture.sample_aspect_ratio = v4l2_get_sar(&s->capture);
     } else {
         v4l2_start_decode(ctx);
diff --git a/third_party/ffmpeg/libavcodec/v4l2_m2m.c b/third_party/ffmpeg/libavcodec/v4l2_m2m.c
index cdfd579810..08232f8e91 100644
--- a/third_party/ffmpeg/libavcodec/v4l2_m2m.c
+++ b/third_party/ffmpeg/libavcodec/v4l2_m2m.c
@@ -369,6 +369,7 @@ int ff_v4l2_m2m_codec_init(V4L2m2mPriv *priv)
     DIR *dirp;
 
     V4L2m2mContext *s = priv->context;
+    s->avctx->time_base = (AVRational) {1, 1000000};
 
     dirp = opendir("/dev");
     if (!dirp)
diff --git a/third_party/ffmpeg/libavcodec/v4l2_m2m_dec.c b/third_party/ffmpeg/libavcodec/v4l2_m2m_dec.c
index 6b936b6df2..5976ff5ee1 100644
--- a/third_party/ffmpeg/libavcodec/v4l2_m2m_dec.c
+++ b/third_party/ffmpeg/libavcodec/v4l2_m2m_dec.c
@@ -34,6 +34,11 @@
 #include "v4l2_m2m.h"
 #include "v4l2_fmt.h"
 
+#define IS_QUEUED(buffer) \
+    ((buffer).flags & (V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE))
+#define UNSET_QUEUED(buffer) \
+    ((buffer).flags &= ~(V4L2_BUF_FLAG_QUEUED | V4L2_BUF_FLAG_DONE))
+
 static int v4l2_try_start(AVCodecContext *avctx)
 {
     V4L2m2mContext *s = ((V4L2m2mPriv*)avctx->priv_data)->context;
@@ -214,6 +219,53 @@ static av_cold int v4l2_decode_close(AVCodecContext *avctx)
     return ff_v4l2_m2m_codec_end(avctx->priv_data);
 }
 
+static av_cold int v4l2_decode_flush(AVCodecContext *avctx)
+{
+    V4L2m2mPriv *priv = avctx->priv_data;
+    V4L2m2mContext *s = priv->context;
+    V4L2Context *capture = &s->capture;
+    V4L2Context *output = &s->output;
+    int ret, i;
+
+    if (!s)
+        return 0;
+
+    if (atomic_load(&s->refcount))
+        while(sem_wait(&s->refsync) == -1 && errno == EINTR);
+
+    if (s->fd >= 0) {
+        ret = ff_v4l2_context_set_status(output, VIDIOC_STREAMOFF);
+        if (ret)
+            av_log(avctx, AV_LOG_ERROR, "output VIDIOC_STREAMOFF\n");
+
+        ret = ff_v4l2_context_set_status(capture, VIDIOC_STREAMOFF);
+        if (ret)
+            av_log(avctx, AV_LOG_ERROR, "capture VIDIOC_STREAMOFF \n");
+    }
+
+    /* all output buffers are available after streamoff */
+    for (i = 0; i < output->num_buffers; i++) {
+        output->buffers[i].status = V4L2BUF_AVAILABLE;
+    }
+
+    /* queue back capture buffers with flag V4L2_BUF_FLAG_DONE to driver */
+    for (i = 0; i < capture->num_buffers; i++) {
+        if (capture->buffers) {
+            UNSET_QUEUED (capture->buffers[i].buf);
+            ret = ff_v4l2_buffer_enqueue (&(capture->buffers[i]));
+            if (ret < 0) {
+                av_log(avctx, AV_LOG_ERROR, "capture queue buffer failed \n");
+            }
+            capture->buffers[i].status = V4L2BUF_IN_DRIVER;
+        }
+    }
+
+    s->draining = 0;
+    s->reinit = 0;
+
+    return 0;
+}
+
 #define OFFSET(x) offsetof(V4L2m2mPriv, x)
 #define FLAGS AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_DECODING_PARAM
 
@@ -244,6 +296,7 @@ static const AVOption options[] = {
         .init           = v4l2_decode_init, \
         .receive_frame  = v4l2_receive_frame, \
         .close          = v4l2_decode_close, \
+        .flush          = v4l2_decode_flush, \
         .bsfs           = bsf_name, \
         .capabilities   = AV_CODEC_CAP_HARDWARE | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AVOID_PROBING, \
         .caps_internal  = FF_CODEC_CAP_SETS_PKT_DTS | FF_CODEC_CAP_INIT_CLEANUP, \
-- 
2.17.0

