From 33358484eab274e512bb38d9474640b6260051fe Mon Sep 17 00:00:00 2001
From: Hou Qi <qi.hou@nxp.com>
Date: Fri, 1 Apr 2022 16:48:42 +0800
Subject: [PATCH 2/3] Chromium: get video buffer from ffmpeg and correct pts

Upstream-Status: Inappropriate [NXP specific]
---
 media/base/video_frame.h              | 12 ++---
 media/ffmpeg/ffmpeg_common.cc         |  3 ++
 media/filters/ffmpeg_video_decoder.cc | 77 ++++++++++++++++++++++++---
 3 files changed, 79 insertions(+), 13 deletions(-)

diff --git a/media/base/video_frame.h b/media/base/video_frame.h
index 21432585b8b50..457ad5f06e953 100644
--- a/media/base/video_frame.h
+++ b/media/base/video_frame.h
@@ -628,6 +628,12 @@ class MEDIA_EXPORT VideoFrame : public base::RefCountedThreadSafe<VideoFrame> {
     ycbcr_info_ = ycbcr_info;
   }
 
+  void set_data(size_t plane, uint8_t* ptr) {
+    DCHECK(IsValidPlane(format(), plane));
+    DCHECK(ptr);
+    data_[plane] = ptr;
+  }
+
  protected:
   friend class base::RefCountedThreadSafe<VideoFrame>;
 
@@ -655,12 +661,6 @@ class MEDIA_EXPORT VideoFrame : public base::RefCountedThreadSafe<VideoFrame> {
                                     const gfx::Rect& visible_rect,
                                     const gfx::Size& natural_size);
 
-  void set_data(size_t plane, uint8_t* ptr) {
-    DCHECK(IsValidPlane(format(), plane));
-    DCHECK(ptr);
-    data_[plane] = ptr;
-  }
-
  private:
   // The constructor of VideoFrame should use IsValidConfigInternal()
   // instead of the public IsValidConfig() to check the config, because we can
diff --git a/media/ffmpeg/ffmpeg_common.cc b/media/ffmpeg/ffmpeg_common.cc
index 0e1bf87244536..508cee2754717 100644
--- a/media/ffmpeg/ffmpeg_common.cc
+++ b/media/ffmpeg/ffmpeg_common.cc
@@ -796,6 +796,9 @@ VideoPixelFormat AVPixelFormatToVideoPixelFormat(AVPixelFormat pixel_format) {
   // The YUVJ alternatives are FFmpeg's (deprecated, but still in use) way to
   // specify a pixel format and full range color combination.
   switch (pixel_format) {
+    case AV_PIX_FMT_NV12:
+      return PIXEL_FORMAT_NV12;
+
     case AV_PIX_FMT_YUV444P:
     case AV_PIX_FMT_YUVJ444P:
       return PIXEL_FORMAT_I444;
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 3bca7356c966b..7904bd436d52f 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -6,6 +6,7 @@
 
 #include <stddef.h>
 #include <stdint.h>
+#include <string>
 
 #include <algorithm>
 #include <memory>
@@ -354,6 +355,7 @@ bool FFmpegVideoDecoder::FFmpegDecode(const DecoderBuffer& buffer) {
 
     // Let FFmpeg handle presentation timestamp reordering.
     codec_context_->reordered_opaque = buffer.timestamp().InMicroseconds();
+    packet->pts = buffer.timestamp().InMicroseconds();
   }
   FFmpegDecodingLoop::DecodeStatus decode_status = decoding_loop_->DecodePacket(
       packet, base::BindRepeating(&FFmpegVideoDecoder::OnNewFrame,
@@ -385,17 +387,78 @@ bool FFmpegVideoDecoder::OnNewFrame(AVFrame* frame) {
   // TODO(fbarchard): Work around for FFmpeg http://crbug.com/27675
   // The decoder is in a bad state and not decoding correctly.
   // Checking for NULL avoids a crash in CopyPlane().
-  if (!frame->data[VideoFrame::kYPlane] || !frame->data[VideoFrame::kUPlane] ||
-      !frame->data[VideoFrame::kVPlane]) {
+  if (!frame->data[VideoFrame::kYPlane] || !frame->data[VideoFrame::kUPlane]) {
     DLOG(ERROR) << "Video frame was produced yet has invalid frame data.";
     return false;
   }
 
-  scoped_refptr<VideoFrame> video_frame =
-      reinterpret_cast<VideoFrame*>(av_buffer_get_opaque(frame->buf[0]));
-  video_frame->set_timestamp(base::Microseconds(frame->reordered_opaque));
-  video_frame->metadata().power_efficient = false;
-  output_cb_.Run(video_frame);
+  const VideoPixelFormat format =
+      AVPixelFormatToVideoPixelFormat(codec_context_->pix_fmt);
+
+  if (format == PIXEL_FORMAT_NV12) {
+    gfx::Size size(codec_context_->coded_width, codec_context_->coded_height);
+    gfx::Size coded_size(codec_context_->coded_width, codec_context_->coded_height);
+    int ret = av_image_check_size(size.width(), size.height(), 0, NULL);
+    if (ret < 0)
+      return ret;
+
+    VideoAspectRatio aspect_ratio = config_.aspect_ratio();
+    if (!aspect_ratio.IsValid() && codec_context_->sample_aspect_ratio.num > 0) {
+      aspect_ratio =
+          VideoAspectRatio::PAR(codec_context_->sample_aspect_ratio.num,
+                                codec_context_->sample_aspect_ratio.den);
+    }
+    gfx::Size natural_size = aspect_ratio.GetNaturalSize(gfx::Rect(size));
+
+    scoped_refptr<VideoFrame> video_frame = frame_pool_.CreateFrame(
+        format, coded_size, gfx::Rect(size), natural_size, kNoTimestamp);
+    video_frame.get()->AddRef();
+
+    VideoColorSpace color_space = AVColorSpaceToColorSpace(
+        frame->colorspace, frame->color_range);
+    if (!color_space.IsSpecified())
+      color_space = config_.color_space_info();
+    video_frame->set_color_space(color_space.ToGfxColorSpace());
+
+    if (codec_context_->codec_id == AV_CODEC_ID_VP8 &&
+        frame->color_primaries == AVCOL_PRI_UNSPECIFIED &&
+        frame->color_trc == AVCOL_TRC_UNSPECIFIED &&
+        frame->colorspace == AVCOL_SPC_BT470BG) {
+      // vp8 has no colorspace information, except for the color range.
+      // However, because of a comment in the vp8 spec, ffmpeg sets the
+      // colorspace to BT470BG. We detect this and treat it as unset.
+      // If the color range is set to full range, we use the jpeg color space.
+      if (frame->color_range == AVCOL_RANGE_JPEG) {
+        video_frame->set_color_space(gfx::ColorSpace::CreateJpeg());
+      }
+    } else if (frame->color_primaries != AVCOL_PRI_UNSPECIFIED ||
+              frame->color_trc != AVCOL_TRC_UNSPECIFIED ||
+              frame->colorspace != AVCOL_SPC_UNSPECIFIED) {
+      media::VideoColorSpace video_color_space = media::VideoColorSpace(
+          frame->color_primaries, frame->color_trc,
+          frame->colorspace,
+          frame->color_range != AVCOL_RANGE_MPEG
+              ? gfx::ColorSpace::RangeID::FULL
+              : gfx::ColorSpace::RangeID::LIMITED);
+      video_frame->set_color_space(video_color_space.ToGfxColorSpace());
+    }
+
+    for (size_t i = 0; i < VideoFrame::NumPlanes(video_frame->format()); i++)
+      video_frame->set_data(i, frame->data[i]);
+
+    video_frame->set_timestamp(base::Microseconds(frame->pts));
+    video_frame->metadata().power_efficient = false;
+    output_cb_.Run(video_frame);
+    ReleaseVideoBufferImpl(video_frame.get(), nullptr);
+  } else {
+    scoped_refptr<VideoFrame> video_frame =
+        reinterpret_cast<VideoFrame*>(av_buffer_get_opaque(frame->buf[0]));
+    video_frame->set_timestamp(base::Microseconds(frame->reordered_opaque));
+
+    video_frame->metadata().power_efficient = false;
+    output_cb_.Run(video_frame);
+  }
+
   return true;
 }
 
-- 
2.17.0

